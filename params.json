{"name":"Gearman","tagline":"A CakePHP plugin for Gearman","body":"CakePHP Gearman\r\n===============\r\n\r\n[![Travis CI build](https://api.travis-ci.org/davidsteinsland/cakephp-gearman.png)](https://travis-ci.org/davidsteinsland/cakephp-gearman) [![Coverage Status](https://coveralls.io/repos/davidsteinsland/cakephp-gearman/badge.png)](https://coveralls.io/r/davidsteinsland/cakephp-gearman) [![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/davidsteinsland/cakephp-gearman/badges/quality-score.png?s=a859558edc53dcb313549cb0cc8a7ccb6164d30c)](https://scrutinizer-ci.com/g/davidsteinsland/cakephp-gearman/) [![Latest Stable Version](https://poser.pugx.org/davidsteinsland/cakephp-gearman/v/stable.png)](https://packagist.org/packages/davidsteinsland/cakephp-gearman) [![Latest Unstable Version](https://poser.pugx.org/davidsteinsland/cakephp-gearman/v/unstable.png)](https://packagist.org/packages/davidsteinsland/cakephp-gearman) [![Total Downloads](https://poser.pugx.org/davidsteinsland/cakephp-gearman/downloads.png)](https://packagist.org/packages/davidsteinsland/cakephp-gearman) [![Dependency Status](https://www.versioneye.com/user/projects/52417622632bac7a2e00140a/badge.png)](https://www.versioneye.com/user/projects/52417622632bac7a2e00140a)\r\n\r\nAn easy way to setup Gearman clients and workers in CakePHP. Gearman is a worker server that makes you able to perform lots of heavy logic in the background, in other programs.\r\n\r\n## Requirements\r\n- gearmand\r\n- pecl-gearman >= 0.5\r\n- PHP >= 5.3\r\n- CakePHP >= 2.2.0\r\n\r\n## Installation\r\n- `composer install`\r\n- `git clone ...`\r\n- HTTP download\r\n\r\nHint: `app/Plugin/Gearman`\r\n\r\n## Examples\r\n\r\nLoad the plugin:\r\n```php\r\nCakePlugin::load('Gearman', array('bootstrap' => true));\r\n```\r\n\r\nAdd the component to your controller:\r\n```php\r\nclass MyController {\r\n\tpublic $components = array('Gearman.Gearman');\r\n\r\n\tpublic function reverseName() {\r\n\t\t$this->autoRender = false;\r\n\t\techo 'Norway = ', $this->Gearman->newTask('reverse', 'Norway');\r\n\t}\r\n\r\n\tpublic function backgroundJob() {\r\n\t\t$handle = $this->Gearman->newBackgroundTask('long_running');\r\n\t\t$this->redirect(array (\r\n\t\t\t'action' => 'jobStatus',\r\n\t\t\t$handle\r\n\t\t));\r\n\t}\r\n\r\n\tpublic function jobStatus($handle) {\r\n\t\t$data = $this->Gearman->backgroundStatus ($handle);\r\n\t\t\r\n\t\t$this->autoRender = false;\r\n\r\n\t\tif (!$data[0]) {\r\n\t\t\techo 'Gearman does not know about this job!';\r\n\t\t\texit;\r\n\t\t}\r\n\r\n\t\tif ($data[1]) {\r\n\t\t\techo 'The job is still running<br />', PHP_EOL;\r\n\t\t}\r\n\r\n\t\techo 'Progress: ';\r\n\t\tif ($data[3] > 0) {\r\n\t\t\tprintf ('%.2f %%', ($data[2] / $data[3]) * 100);\r\n\t\t} else {\r\n\t\t\techo 'N/A';\r\n\t\t}\r\n\r\n\t\techo '<br />', PHP_EOL;\r\n\t\techo 'Refresh this page to see the progress increase';\r\n\t}\r\n}\r\n```\r\n\r\nYour worker code (`app/Console/Command/<nameOfShell>`):\r\n```php\r\nclass NameOfShell extends AppShell {\r\n\tpublic $tasks = array('Gearman.GearmanShell');\r\n\r\n\tpublic function startup() {\r\n\t\tparent::startup();\r\n\t\t$this->GearmanShell->addMethod('reverse', $this);\r\n\t\t$this->GearmanShell->addMethod('long_running', array($this, 'longRunning'));\r\n\t}\r\n\r\n\t/**\r\n\t * To support running ./Console/cake ImageResize as an alternative\r\n\t * to ./Console/cake ImageResize GearmanShell\r\n\t */\r\n\tpublic function main() {\r\n\t\t$this->GearmanShell->execute();\r\n\t}\r\n\r\n    /**\r\n\t * $workload will be a JSON decoded array, if your client\r\n\t * sends an array as workload. If not, it will be a string\r\n\t */\r\n\tpublic function execute(GearmanJob $job, $workload) {\r\n\t\treturn strrev($workload);\r\n\t}\r\n\r\n\tpublic function longRunning(GearmanJob $job, $workload) {\r\n\t\t$m = 60;\r\n\t\tfor ($i = 1; $i <= $m; $i++) {\r\n\t\t\techo \"Sleeping, \", ($m - $i), \" seconds left\\n\";\r\n\t\t\t// update progress\r\n\t\t\t$job->sendStatus($i, $m);\r\n\t\t\tsleep(1);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nThen **start your worker**:\r\n```sh\r\n./Console/Cake NameOfShell\r\n```\r\n\r\nIf you want to start your worker process in the background, consider using `nohup`:\r\n```sh\r\nnohup ./Console/Cake NameOfShell 2>&1 > /dev/null &\r\n```\r\n\r\nYou can also consider using the Daemon task in the [cakephp-shells](https://github.com/davidsteinsland/cakephp-shells) repo.\r\n\r\n## Other\r\nThe worker can be written in whatever language supports Gearman. This means that your worker registers at the Gearman server, and your client requests the specific method.\r\n\r\n## Problems\r\nPlease report them in the Issues page. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}